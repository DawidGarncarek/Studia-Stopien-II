    # Zadanie4
    #"- Autor: Dawid Garncarek\n",
    #"- Grupa: 3\n",
    #"- Prowadzący: Bogdan Ruszczak\n",
    #"- Opis: \n",
    #"  1. Analiza danych cen, wagi i BMI\n",
    #"  2. Analiza kalorii użytkowników i produktów spożywczych\n",
    #"  3. Analiza planu ćwiczeniowego"

    !pip install sqlalchemy cx_Oracle pandas
    !pip install seaborn
    !pip install matplotlib
    !pip install plotly
    import os
    from sqlalchemy import create_engine
    import pandas as pd
    import matplotlib.pyplot as plt
    import seaborn as sns
    import plotly.express as px
    from IPython.display import display
    import cx_Oracle


    username = 'S101095'
    password = 'S101095'
    host = '217.173.198.135'
    port = '1521'
    service_name = 'tpdb'

    dsn = f'{username}:{password}@{host}:{port}/?service_name={service_name}'
 
    engine = create_engine(f'oracle+cx_oracle://{username}:{password}@{host}:{port}/?service_name={service_name}')
    connection = engine.connect()

# Analiza 1
# Pobranie danych
#query_price = """SELECT pricedate, price, username FROM price"""
#query_weight = """SELECT weightdate, userweight, username FROM weight"""
#query_bmi = """SELECT calculationdate, resultbmi, username FROM bmiresult"""

#df_price = pd.read_sql(query_price, connection)
#df_weight = pd.read_sql(query_weight, connection)
#df_bmi = pd.read_sql(query_bmi, connection)

# Tworzenie DataFrame
#df_analysis1 = pd.merge(df_weight, df_bmi, on="username", how="inner")
#df_analysis1 = pd.merge(df_analysis1, df_price, on="username", how="inner")

# Wizualizacja 1: Zależność BMI od wagi
#sns.scatterplot(data=df_analysis1, x="userweight", y="resultbmi", hue="username")
#plt.title("Zależność BMI od wagi użytkowników")
#plt.xlabel("Waga (kg)")
#plt.ylabel("BMI")
#plt.grid()
#plt.show()

# Wizualizacja 2: Średnia cena w czasie
#df_price['pricedate'] = pd.to_datetime(df_price['pricedate'])
#df_avg_price = df_price.groupby(df_price['pricedate'].dt.to_period("M")).mean().reset_index()
#plt.plot(df_avg_price['pricedate'].astype(str), df_avg_price['price'], marker='o')
#plt.title("Średnia cena w czasie")
#plt.xlabel("Data")
#plt.ylabel("Cena (PLN)")
#plt.grid()
#plt.show()

# Grupowanie
grouped_analysis1 = df_analysis1.groupby("username").agg({"price": "mean", "userweight": "mean", "resultbmi": "mean"})
print(grouped_analysis1)

# Analiza 2

# Pobranie danych
query_calories_needed = "SELECT newcaloriesdate, caloriesneededresult, username FROM usercaloriesneeded"
query_calories_result = "SELECT newcaloriesdate, calories, productid, username FROM usercaloriesresult"
query_food_products = "SELECT id, productname, calories_100g FROM foodproducts"

df_calories_needed = pd.read_sql(query_calories_needed, connection)
df_calories_result = pd.read_sql(query_calories_result, connection)
df_food_products = pd.read_sql(query_food_products, connection)

# Tworzenie DataFrame
df_analysis2 = pd.merge(df_calories_result, df_calories_needed, on="username", how="inner")
df_analysis2 = pd.merge(df_analysis2, df_food_products, left_on="productid", right_on="id", how="inner")

# Wizualizacja 1: Kalorie spożyte vs zapotrzebowanie
px.bar(df_analysis2, x="username", y=["calories", "caloriesneededresult"], title="Kalorie spożyte vs zapotrzebowanie")

# Wizualizacja 2: Najpopularniejsze produkty
popular_products = df_analysis2.groupby("productname")["calories"].sum().nlargest(5).reset_index()
sns.barplot(data=popular_products, x="calories", y="productname")
plt.title("Top 5 najpopularniejszych produktów")
plt.xlabel("Kalorie")
plt.ylabel("Produkt")
plt.grid()
plt.show()

# Grupowanie
grouped_analysis2 = df_analysis2.groupby("caloriesneededresult").agg({"calories": "sum", "caloriesneededresult": "mean"})
print(grouped_analysis2)

# Analiza 3

# Pobranie danych
query_exercise_sets = "SELECT username, exercisesetid, trainingday FROM userexercisesets"
query_exercises = "SELECT id, exercisename, intensitylevel, durationminutes FROM exercises"
query_users = "SELECT id, username FROM aspnetusers"

df_exercise_sets = pd.read_sql(query_exercise_sets, connection)
df_exercises = pd.read_sql(query_exercises, connection)
df_users = pd.read_sql(query_users, connection)

# Tworzenie DataFrame
df_analysis3 = pd.merge(df_exercise_sets, df_exercises, left_on="exercisesetid", right_on="id", how="inner")
df_analysis3 = pd.merge(df_analysis3, df_users, on="username", how="inner")

# Wizualizacja 1: Intensywność ćwiczeń
sns.countplot(data=df_analysis3, x="intensitylevel", order=df_analysis3["intensitylevel"].value_counts().index)
plt.title("Rozkład intensywności ćwiczeń")
plt.xlabel("Intensywność")
plt.ylabel("Liczba")
plt.grid()
plt.show()

# Wizualizacja 2: Czas ćwiczeń
px.histogram(df_analysis3, x="durationminutes", title="Czas trwania ćwiczeń")

# Grupowanie
grouped_analysis3 = df_analysis3.groupby("username").agg({"durationminutes": "sum", "trainingday": "count"})
print(grouped_analysis3)

   
